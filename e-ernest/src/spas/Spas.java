package spas;

import imos.IAct;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import javax.vecmath.Vector3f;

import utils.ErnestUtils;

import ernest.Ernest;
import ernest.ITracer;

/**
 * The spatial system.
 * Maintains the local space map and the persistence memory.
 * @author Olivier
 */
public class Spas implements ISpas 
{
	
	/** The Tracer. */
	private ITracer m_tracer = null; 
	
	public static int PLACE_BACKGROUND = -1;
	public static int PLACE_SEE = 0;
	public static int PLACE_TOUCH = 1;
	public static int PLACE_FOCUS = 10;
	public static int PLACE_BUMP = 11;
	public static int PLACE_EAT  = 12;
	public static int PLACE_CUDDLE = 13;
	public static int PLACE_PRIMITIVE = 14;
	public static int PLACE_COMPOSITE = 15;
	public static int PLACE_INTERMEDIARY = 16;
	public static int PLACE_EVOKE_PHENOMENON = 17;
	public static int PLACE_PHENOMENON = 18;
	
	public static int SHAPE_CIRCLE = 0;
	public static int SHAPE_TRIANGLE = 1;
	public static int SHAPE_PIE = 2;
	public static int SHAPE_SQUARE = 3;

	/** Ernest's persistence momory  */
	private PersistenceMemory m_persistenceMemory = new PersistenceMemory();
	
	/** Ernest's local space memory  */
	private LocalSpaceMemory m_localSpaceMemory;
	
	/** The list of saliences generated by Ernest's sensory system  */
	List<IPlace> m_placeList = new ArrayList<IPlace>();
	
	//ArrayList<ISegment> m_segmentList = new ArrayList<ISegment>();

	IObservation m_observation;
	
	/** Temporary places.  */
	//ArrayList<IPlace> m_places = new ArrayList<IPlace>();
	
	/** The clock of the spatial system. (updated on each update cycle as opposed to IMOS) */
	private int m_clock;

	public void setTracer(ITracer tracer) 
	{
		m_tracer = tracer;
		m_persistenceMemory.setTracer(tracer);
		m_localSpaceMemory = new LocalSpaceMemory(this, m_tracer);
	}

	/**
	 * The main routine of the Spatial System that is called on each interaction cycle.
	 * Maintain the local space memory.
	 * Construct bundles and affordances.
	 * Maintain the current observation that is used by IMOS. 
	 * @param interactionPlace The place where the ongoing interaction started.
	 * @param observation The current observation.
	 */
	public void step(IObservation observation, ArrayList<IPlace> places) 
	{		
		m_observation = observation;
		
		// translate and rotate the local space memory;
		
		Vector3f memoryTranslation = new Vector3f(observation.getTranslation());
		memoryTranslation.scale(-1);
		m_localSpaceMemory.update(memoryTranslation, - observation.getRotation());

		// Create and maintain phenomenon places from interaction places. 
		
		m_localSpaceMemory.phenomenon(places, observation, m_clock);
		
		// Construct synergies associated with bundles in the peripersonal space.		
		//synergy(interactionPlace, observation);
	}
	
	public int getValue(int i, int j)
	{
		Vector3f position = new Vector3f(1 - j, 1 - i, 0);
		if (m_localSpaceMemory != null)
			return m_localSpaceMemory.getValue(position);
		else
			return 0xFFFFFF;
	}

	public int getAttention()
	{
		int attention;
		if (m_observation == null || m_observation.getFocusPlace() == null)
			attention = Ernest.UNANIMATED_COLOR;
		else
			attention = m_observation.getFocusPlace().getBundle().getValue();

		return attention;
	}
	
	/**
	 * Set the list of saliences from the list provided by VacuumSG.
	 * @param salienceList The list of saliences provided by VacuumSG.
	 */
	public void setPlaceList(List<IPlace> placeList)
	{
		m_placeList = placeList;
	}
		
	public ArrayList<IPlace> getPlaceList()
	{
		//return m_places;
		return m_localSpaceMemory.getPlaceList();
	}

	public void traceLocalSpace() 
	{
		m_localSpaceMemory.Trace();
	}

//	/**
//	 * Find the closest place whose span overlaps this direction.
//	 * @param direction The direction in which to look at.
//	 * @return The place.
//	 */
//	public IPlace seePlace(float direction)
//	{
//		IPlace place = null;
//
//		for (IPlace p : m_places)
//		{
//			float firstAngle = ErnestUtils.polarAngle(p.getFirstPosition());
//			float secondAngle = ErnestUtils.polarAngle(p.getSecondPosition());
//			if (firstAngle < secondAngle)
//			{
//				// Does not overlap direction -PI
//				if (direction > firstAngle + 0.1f && direction < secondAngle - .05f && 
//					p.getBundle().getVisualValue() != Ernest.STIMULATION_VISUAL_UNSEEN &&
//					p.attractFocus(m_clock))
//						if (place == null || p.getDistance() < place.getDistance())
//							place = p;
//			}
//			else
//			{
//				// Overlaps direction -PI
//				if (direction > firstAngle + .1f || direction < secondAngle - .1f &&
//					p.getBundle().getVisualValue() != Ernest.STIMULATION_VISUAL_UNSEEN &&
//					p.attractFocus(m_clock))
//						if (place == null || p.getDistance() < place.getDistance())
//							place = p;				
//			}
//		}
//		return place;
//	}
		
//	/**
//	 * Get the first place found at a given position.
//	 * @param position The position of the location.
//	 * @return The place.
//	 */
//	public IPlace getPlace(Vector3f position)
//	{
//		IPlace place = null;
//		for (IPlace p : m_places)
//		{
//			if (p.attractFocus(m_clock))
//			{
//				//if (p.isInCell(position) && p.attractFocus(m_persistenceMemory.getUpdateCount()))
//				Vector3f compare = new Vector3f(p.getPosition());
//				compare.sub(position);
//				if (compare.length() < 1f)
//					place = p;
//			}
//		}
//		return place;
//	}
//
//	/**
//	 * Clear a location in the local space memory.
//	 * @param position The position to clear.
//	 */
//	public void clearPlace(Vector3f position)
//	{
//		for (Iterator it = m_places.iterator(); it.hasNext();)
//		{
//			IPlace l = (IPlace)it.next();
//			if (l.isInCell(position))
//				it.remove();
//		}		
//	}
		
//	public void clear()
//	{
////		for (Iterator it = m_places.iterator(); it.hasNext();)
////		{
////			IPlace p = (IPlace)it.next();
////			if (p.getType() == Spas.PLACE_FOCUS) p.setType(Spas.PLACE_SEE);
////			if (p.getUpdateCount() < m_persistenceMemory.getUpdateCount() - 10)
////				it.remove();
////		}
//
//		m_places.clear();
//	}

	public IPlace getFocusPlace() 
	{
		return m_localSpaceMemory.getFocusPlace();
	}

	public IPlace addPlace(Vector3f position, int type, int shape) 
	{
		IPlace place = m_localSpaceMemory.addPlace(null, position);
		place.setFirstPosition(position);
		place.setSecondPosition(position);
		place.setType(type);
		place.setShape(shape);
		place.setUpdateCount(m_clock);
		
		return place;
	}

	public IBundle seeBundle(int value) 
	{
		return m_persistenceMemory.seeBundle(value);
	}

	public IBundle addBundle(int visualValue, int tactileValue) 
	{
		return m_persistenceMemory.addBundle(visualValue, tactileValue, m_clock);
	}

	public int getClock() 
	{
		return m_clock;
	}

	public IPlace addPlace(IBundle bundle, Vector3f position) 
	{
		return m_localSpaceMemory.addPlace(bundle, position);
	}

	public void tick() 
	{
		m_clock++;
	}

	public ArrayList<IPlace> getPhenomena() 
	{
		return m_localSpaceMemory.getPhenomena(m_clock);
	}	
}
